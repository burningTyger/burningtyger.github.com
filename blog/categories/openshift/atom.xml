<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openshift | Some thoughts]]></title>
  <link href="http://burningTyger.github.com/blog/categories/openshift/atom.xml" rel="self"/>
  <link href="http://burningTyger.github.com/"/>
  <updated>2014-01-05T12:01:09+01:00</updated>
  <id>http://burningTyger.github.com/</id>
  <author>
    <name><![CDATA[burningTyger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moodle on Openshift one liner]]></title>
    <link href="http://burningTyger.github.com/blog/2013/02/10/moodle-on-openshift-one-liner/"/>
    <updated>2013-02-10T21:55:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/02/10/moodle-on-openshift-one-liner</id>
    <content type="html"><![CDATA[<pre><code>rhc app create moodle php-5 mysql --from-code=git://github.com/burningTyger/openshift_moodle.git
</code></pre>

<p>Disclaimer: You do need Ruby, the rhc gem and git though :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moodle auf Openshift betreiben]]></title>
    <link href="http://burningTyger.github.com/blog/2013/02/01/moodle-auf-openshift-betreiben/"/>
    <updated>2013-02-01T20:35:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/02/01/moodle-auf-openshift-betreiben</id>
    <content type="html"><![CDATA[<h3>Moodle?</h3>

<p>Moodle ist die klassische Lernplatform fürs Intra-/Internet und wird von
vielen Schulen und Universitäten eingesetzt. Neben unzähligen
Einstellungsmöglichkeiten und Plugins hat es mittlerweile einen Status
erreicht, der es möglich macht, Moodle für nahezu jeden
Anwendungsbereich einzurichten. Dabei spielt es dann keine Rolle, ob 12 Nutzer bedient
werden oder 12 Millionen. Moodle ist für so ziemlich alles gewappnet und
eine aktive Entwicklergemeinde sorgt für einen ständigen Fluss an
Verbesserungen und Erweiterungen.</p>

<p>Das klingt erstmal gut, aber wer Moodle ernsthaft einsetzen möchte,
braucht eine Menge Zeit, einige Ressourcen und Durchhaltevermögen.
Moodle kann ein richtiges Monster sein. Die Basisinstallation ist recht
umfangreich und man braucht einiges an Ressourcen, um Moodle
einigermaßen zum Laufen zu bekommen. Der Speicherplatz, den man vom
Provider nebenan zur Verfügung gestellt bekommt, reicht meistens nicht
aus, um eine sinnvolle Installation einzurichten. Moodle ist durch seine
schiere Größe speicherhungrig und verlangt nach mehr. Darüber hinaus
muss der Server PHP 5.3 mit einigen Erweiterungen und MySQL bereitstellen. Da
die meisten Provider keine genauen Angaben über Speicherkapazität machen
und teilweise auch nicht verraten, welche Erweiterungen installiert
sind, möchte man ungern Verträge eingehen.</p>

<h3>Openshift</h3>

<p>An dieser Stelle kommt <a href="https://openshift.com">Openshift</a> von Red Hat
ins Spiel. Openshift ist ein relativ neuer Anbieter einer <i>Platform as a
Service</i>, zu neudeutsch <i>Cloud</i>. Man installiert eine sogenannte
Applikation, in unserem Fall Moodle, bei Openshift und dort kümmert man
sich um die notwendigen Ressourcen. D.h. braucht man viel Ressourcen,
weil viele Nutzer auf den Dienst zugreifen, dann wird die Anwendung
skaliert, bekommt also mehr Ressourcen zugeteilt. Bei geringerem Bedarf
wird wieder runtergeschraubt. Das kostet natürlich Geld. Je nach
Verbrauch. Dafür muss man sich um nichts kümmern, es läuft einfach.</p>

<p>Als einfacher Nutzer oder als Organisation mit weniger hohen Ansprüchen
lässt sich Openshift aber auch schon verwenden. Man bekommt als
kostenlosen Einstieg in den PaaS drei Instanzen zu jeweils 500MB
zugeteilt, die man auch verbinden kann. D.h. es stehen einem kostenlos
bis zu 1.5GB an Speicher zur Verfügung. Das lasse man sich jetzt mal auf
der Zunge zergehen. Das bietet kein Provider um die Ecke und auch nicht
für umsonst.</p>

<p>500MB sind eine gute Größe für eine einfache Moodle Installation. Es
reicht um etwa 5–10 Personen gleichzeitig zu versorgen. 5-10 Personen,
die gleichzeitig versuchen eine Seite zu laden. Mit anderen Worten, wenn
eine ganze Klasse von 30 Schülern an 30 PCs sitzt und gleichzeitig
versucht sich einzuloggen. Der eine braucht etwas länger, der andere ist
etwas schneller. Im schlimmsten Fall muss der 11. etwas länger auf die
Seite warten, wird aber dann auch bedient und kann sich einloggen. Wie
viele Klassen arbeiten gleichzeitig an Moodle? In seltenen Fällen mehr
als eine und wenn, dann staut es sich höchstens beim Login.</p>

<h3>Git</h3>

<p>Openshift ist kein klassischer Anbieter von Speicherplatz im Internet.
Es ist ausgelegt für moderne Webanwendungen, die mit der
Versionsverwaltung <a href="http://git-scm.com">Git</a> entwickelt wurden. Git ist keine
Programmiersprache sondern ein Weg, unterschiedliche Versionen einer
Software zu verwalten. Eine Art Buchhaltung für Software. Jeder Zustand
wird festgehalten und kann rückgängig gemacht werden. Man kann
Änderungen in sogenannte Branches verlagern und später mit einbinden. Es
macht die Entwicklung von modernen Anwendungen erheblich einfacher und
fördert die Zusammenarbeit mit anderen Entwicklern.</p>

<p>Openshift macht sich die unterschiedlichen Fähigkeiten von Git zu eigen
und ermöglicht den Abgleich von Daten nur darüber. Kein FTP, keine
umständlichen Überschreibeaktionen, um alte Daten mit neuen
auszutauschen und der bangen Hoffnung, dass man nicht doch das falsche
gelöscht hat. Git überträgt lediglich die Änderungen und startet den
Server auf Openshift neu. Damit werden alle Aktualisierungen aktiv und
die Anwendung ist auf dem neusten Stand.</p>

<p>Moodle verwendet zur Entwicklung bereits Git und betreibt ein sog.
öffentliches Repository auf <a href="https://github.com">GitHub</a> unter der
Adresse
<a href="https://github.com/moodle/moodle">https://github.com/moodle/moodle</a>.
Dort kann man alle Änderungen, sogenannte Commits nachvollziehen und
beobachten. Leider kann man dieses Repository nicht direkt bei Openshift
verwenden, dafür ist Moodle dann wieder etwas anspruchsvoll. Man muss
Moodle vorerst in ein anderes Repository einbinden, damit es die
richtigen Einstellungen für die Datenbank etc. findet und verwenden
kann. Damit nicht jeder von vorne anfangen muss und das Rad mehrmals
erfunden wird, habe ich unter
<a href="https://github.com/burningTyger/openshift_moodle">openshift_moodle</a> ein
Repository eingerichtet, das sich direkt für Openshift verwenden lässt.
Dort gibt es auch eine Anleitung auf Englisch, die bei der Einrichtung
hilft. Sollte es Schwierigkeiten mit der englischen Anleitung geben,
stehe ich für Fragen gerne zur Verfügung. Entweder per Twitter
<a href="https://twitter.com/btyga">@btyga</a>
oder per eMail über b6tyger bei gmail.com.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom config files in Openshift submodules]]></title>
    <link href="http://burningTyger.github.com/blog/2013/01/16/custom-config-files-in-openshift-submodules/"/>
    <updated>2013-01-16T20:08:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/01/16/custom-config-files-in-openshift-submodules</id>
    <content type="html"><![CDATA[<p>Using a <a href="http://git-scm.com/book/en/Git-Tools-Submodules">git submodule</a> in one
of your <a href="https://openshift.redhat.com">Openshift</a> apps can be quite useful. I
created a <a href="http://j.mp/V2fOkq">Moodle Quickstart</a> and needed to embed
<a href="http://moodle.org">Moodle</a> inside my Openshift repo. There are many ways of
doing so but most are a pain to maintain if you need frequent updates to keep
up with security issues.</p>

<p>So forget about <a href="http://git-scm.com/book/ch6-7.html">subtrees</a>, manual
overwriting with archives etc. use a submodule instead. I'll post an example
with Moodle here, the same can be said about most other apps. Assuming you set
up a new app through the web interface:</p>

<pre><code> rhc app git-clone moodle 
 # clone the app locally cd moodle 
 git rm -rf php git
 ci -m 'remove php dir for submodule' 
 # clean your repo git submodule add
 git://git.moodle.org/moodle.git php 
 # make php your submodule dir 
 cd php git
 checkout 10ad21dc9a50c4720bf69fa0224eeb28a892e997 
 # check out a certain commit inside your submodule 
 cd .. 
 git add -u 
 git ci -am 'add moodle submodule and set to 2.3.3' 
 # go back to your repo root and commit the submodule to it
</code></pre>

<p>Now you can push your app to Openshift and you can easily update your app by
updating the submodule to a newer commit.</p>

<p>There is one caveat though: you cannot add your own files to the submodule
without having a remote repository where you can store your changes and make
them available to others (in this case Openshift because it will need the
commit with your chages accessible). As you see the submodule is alien to the
parent repository. Everything the parent knows about the submodule is inside
the <code>.gitmodules</code> file. It keeps track of the submodule and its attributes:</p>

<pre><code>[submodule "php"] 
path = php 
url = git://git.moodle.org/moodle.git
</code></pre>

<p>If you also check out the github page you will notice that the submodule repo
is set to a certain commit:</p>

<p><img src="http://d.pr/i/2vLI+" alt="github: moodle path is set to commit" /></p>

<p>If you clone my repository from GitHub you will also notice that the <code>php</code> dir
is empty. That's because there is nothing. All it does is refer to that moodle
repo commit. You can trigger the clone of that repo but there's no need to.
Openshift can do that for you once you push it there.</p>

<p>You get the idea. You don't have control over that submodule. Take it or leave
it. So unless you want to fork moodle with your own changes to the repo and
pull in changes to that fork you cannot make changes to it.</p>

<p>That's where we are. However, there is a simple workaround for this on
Openshift that is really slick and easy to set up. You can use one of the
<code>action_hooks</code> that come with each app and that reside in the
<code>.openshift/action_hooks</code> dir in the root of your repo.</p>

<p>In the case of Moodle I needed to place my <code>config.php</code> in the <code>php</code> dir where
Moodle expects all the database settings and other stuff to properly run.</p>

<p>Since I already used <code>.openshift/action_hooks/pre_start_php-5.3</code> to set the
OPENSHIFT_SECURE_TOKEN (which I described
<a href="http://burningtyger.github.com/blog/2013/01/06/hassle-free-secure-tokens-%0Aon-openshift/">here</a>) I just added a line which copies the <code>config.php</code> from
<code>config/config.php</code> to <code>php/config.php</code>. That means I added a dir with a file
in it to the <a href="https://github.com/burningTyger/openshift_moodle/tree/master/config">parent directory</a>
and copied it upon deployment to the submodule folder:</p>

<pre><code>cp ~/app-root/repo/config/config.php ~/app-root/repo/php/
</code></pre>

<p>Since the <code>action_hook</code> are called within every deployment there is no need to
manually move files or change the submodule via SSH. The config file can be
added to the Openshift repository and tracked there. A very clean solution if
you ask me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hassle free secure tokens on Openshift]]></title>
    <link href="http://burningTyger.github.com/blog/2013/01/10/hassle-free-secure-tokens-on-openshift/"/>
    <updated>2013-01-10T15:01:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/01/10/hassle-free-secure-tokens-on-openshift</id>
    <content type="html"><![CDATA[<p><a href="https://openshift.redhat.com">Openshift</a> makes extensive use of env
vars that can be used by your apps. This is really useful for creating
generic repositories like <a href="https://github.com/openshift">Quickstarts</a>.</p>

<p>You create an app, everybody who likes it pulls it into their Openshift
repository and deploys it. Usually everything is ok but
<a href="https://openshift.redhat.com/community/developers/get-involved/creating-quickstarts">sometimes</a>
you need to create a secure token to have an extra layer of security.</p>

<p>For my Openshift <a href="http://j.mp/V2fOkq">Moodle Quickstart</a> I needed a
secure token to <a href="https://github.com/burningTyger/openshift_moodle/blob/master/config/config.php#L73">salt passwords</a>.
I didn't want to create a config file that needs to be manually changed
by the user so I thought of something else:</p>

<pre><code>export OPENSHIFT_SECURE_TOKEN="$(ruby -e "
  require 'securerandom'
  if File.exist? 'token'
    token = File.open('token').read
  else
    token = SecureRandom.base64(64)
    File.open('token', 'w') { |file| file.write(token) }
  end
  puts token
")"
</code></pre>

<p>This little script goes into one of the <code>action_hooks</code> that are sourced
by the app.</p>

<p>In case of my Moodle repo I put it into
<code>.openshift/action_hooks/pre_start_php-5.3</code>. For other apps you will
have to use the appropriate cartridge name instead (i.e ruby-1.9 etc.).</p>

<p>What this script does it runs an inline Ruby script that checks if a
token file exists in your data dir and reads it. If not, it creates one
and writes a random string into it.</p>

<p>After that it writes the string to STDOUT when it is set to
<code>OPENSHIFT_SECURE_TOKEN</code>. This is the env var that you can then use in
your app's config files without manually entering a string yourself.</p>

<p>If you need to migrate your app from somewhere else to Openshift you can
still use this script and just set via SSH the string in <code>token</code>.</p>
]]></content>
  </entry>
  
</feed>
