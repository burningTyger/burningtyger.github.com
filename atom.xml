<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Some thoughts]]></title>
  <link href="http://burningTyger.github.com/atom.xml" rel="self"/>
  <link href="http://burningTyger.github.com/"/>
  <updated>2014-02-03T21:15:50+01:00</updated>
  <id>http://burningTyger.github.com/</id>
  <author>
    <name><![CDATA[burningTyger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ClockworkMod Recovery lässt sich nicht mit Heimdall installieren]]></title>
    <link href="http://burningTyger.github.com/blog/2014/02/03/clockworkmod-recovery-lasst-sich-nicht-mit-heimdall-installieren/"/>
    <updated>2014-02-03T21:06:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2014/02/03/clockworkmod-recovery-lasst-sich-nicht-mit-heimdall-installieren</id>
    <content type="html"><![CDATA[<p>Gestern habe ich einen fatalen Fehler gemacht. Das letzte Nightly von CyanogenMod 11 war defekt und mein i9195 ließ sich nicht mehr starten. Das CM Logo drehte eine Endlosschleife und nichts war zu machen. Also nochmal über den Recovery Mode installieren, die Nightlies werden beim internen Update ja auf der SD-Karte abgelegt. Aber, das half auch nicht.</p>

<p>Vielleicht ist ClockworkMod Recovery nicht aktuell genug? Also das auch gleich neu installieren, Heimdall ist schnell auf Linux installiert, CMR ist auch da, los gehts.</p>

<p>Erster Fehler, auf das I9195 sollte man nie ein CMR für das N5110 installieren. Es endet damit, dass man nicht in den Recovery Mode kommt. Wenn man dann auch nicht das Telefon starten kann, ist es wertlos. Also nochmal Recovery einspielen, diesmal die richtige Version. Pustekuchen, geht nicht mehr. Der Download startet, Heimdall sagt 100%, bricht dann aber mit einem Timeout ab, weil das letzte Paket nicht antwortet.</p>

<p>Jetzt geht gar nichts mehr. Prima. Alles ausprobiert, keine Informationen im Netz. Also gut, über VirtualBox Odin installieren, vielleicht hilft das. Aber da gibt es Schwierigkeiten mit USB.</p>

<p>Also VirtualBox unter OSX anschmeißen, das geht auch mit USB. Nach einigem Ausprobieren, bin ich auf diese Seite gekommen, die beschreibt, wie man Odin unter OS X in VirtualBox und Windows XP zum Laufen bekommt. Tipp, USB2 aktivieren, das man über die Extension Packs nachinstallieren kann. Ebenso die Samsung Treiber installieren, Kies ging irgendwie nicht.
Link: <a href="http://forum.xda-developers.com/showthread.php?t=1391189">xda Forum</a></p>

<p>Über diesen Umweg war es dann schließlich doch möglich das richtige ClockworkMod Recovery zu installieren und anschließend ein funktionierendes Nightly zu flashen.</p>

<p>Man lernt nie aus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CyanogenMod 11 auf dem Samsung Galaxy Note 8 (N5110 WiFi)]]></title>
    <link href="http://burningTyger.github.com/blog/2014/02/03/cyanogenmod-11-auf-dem-samsung-galaxy-note-8-n5110-wifi/"/>
    <updated>2014-02-03T20:29:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2014/02/03/cyanogenmod-11-auf-dem-samsung-galaxy-note-8-n5110-wifi</id>
    <content type="html"><![CDATA[<p>Der Ablauf ist im Prinzip der Selbe, wie schon im vorhergehenden Beitrag zum Samsung Galaxy S4 Mini, aber der Einfachheit halber, schreibe ich es nochmal auf und gebe gleich die notwendigen Quellen mit an.</p>

<p>Um es gleich vorweg zu nehmen, CyanogenMod 11 ist auf dem Note 8 ein echter Zugewinn. Nach dem letzten Update von Samsung auf Android 4.2.2 gab es kein Halten mehr, das musste schleunigst wieder runter – wackelige Scrolls zwischen den Home Screens waren und sind unerträglich für so ein hochwertiges Tablett. Und einen Vorteil konnten man bei dem Update nicht erkennen.</p>

<p>CyanogenMod 11 hat natürlich einen Nachteil für das Note 8, der Stift funktioniert an einigen Stellen nicht wie unter der OEM Firmware, das ist klar. Aber, diese Einschränkungen waren in meinem Fall minimal und unmerklich. Lediglich das Eingabefeld für Handschrift ist nicht mehr da, das fand ich interessant, habe es aber ehrlich gesagt nie benutzt. Obwohl es eigentlich recht cool war. Texterkennung ziemlich perfekt. Aber wenn man es nicht braucht, sollte es kein Grund sein, nicht darauf zu verzichten. Ersatz für S Note gibt es mit Quill. Quill ist mindestens so gut wie S Note und kann sogar Vektorgrafik. Dementsprechend sind Exporte nach PDF wesentlich kleiner und qualitativ hochwertiger als unter S Note, das nur Grafiken einbindet.</p>

<p>Aber nun zur Installation.</p>

<p>Hier vorab die Quellen, die man sich anschauen sollte:
Der Thread bei xda-developers: http://forum.xda-developers.com/showthread.php?t=2523706
Die Seite der Nightlies: http://download.cyanogenmod.org/?device=n5100
Changelog zu den Nightlies: http://www.cmxlog.com/11/n5110/
Link zu Heimdall: http://glassechidna.com.au/heimdall/
Link zu TKruzze, der die Gapps bereitstellt: http://www.androidfilehost.com/profile.php?uid=23134718111252952
Link zu ClockworkMod Recovery 0.6.4.4: http://www.androidfilehost.com/?fid=23212708291675367</p>

<p>Die oben angegebenen Links können natürlich in der Zwischenzeit aktualisiert worden sein!</p>

<p>So, bevor es losgeht, eine letzte Warnung: Wenn etwas kaputt geht, es ist nicht meine Schuld. Sicher Deine Accounts, nach dem Flashen muss alles neu installiert werden. App-Daten bleiben auf der internen Karte gespeichert, aber nicht immer klappt die automatische Verbindung der Daten. Ebenso werden alle Kontodaten von z.B. Google gelöscht.</p>

<p>Zum Flashen von CyanogenMod braucht man keine externe SD-Karte, man kann sie nutzen, ebenso kann man aber auch die interne SD-Karte nutzen. CyanogenMod 11 Nightly runterladen und z.B. im Download-Ordner ablegen. Ebenso das Gapps Paket. Hier kann man wählen zwischen den Paketen. das Kleinste reicht, den Rest der Apps kann man über den Play Store nachinstallieren.</p>

<p>Dann Das Note 8 ausschalten.</p>

<p>Heimdall installieren, auf dem Mac muss nach der Installation ein Reboot durchgeführt werden. Auf Linux war das nicht nötig.</p>

<p>ClockworkMod Recovery entpacken und im Terminal in das entsprechende Verzeichnis wechseln (es sollte recovery-0.6.4.4.img vorhanden sein).</p>

<p>Nun folgende Schritte durchführen (so ging es unter Mac OS X 10.9.1 und Ubuntu 13.10):</p>

<ul>
<li>Verbindungskabel am Rechner anschließen, aber noch nicht ans Tablet</li>
<li>Note 8 im Download-Modus starten (Ton-leise + An/Aus + Home)</li>
<li>Nach der Warnung über das USB-Kabel verbinden und Ton lauter drücken</li>
<li>im Terminal <code>heimdall flash --RECOVERY recovery-0.6.4.4.img --no-reboot</code> eingeben</li>
<li>Das Tablet startet den blauen Balken und im Terminal gibt es eine Erfolgsmeldung</li>
<li>Das Tablet neu starten mit Hilfe von Ton-lauter + An/Aus + Home</li>
<li>Note 8 ist nun im Recovery-Modus und man kann CM-11 installieren</li>
<li>An/Aus geht im Menü zurück, Home bestätigt die Auswahl, die man mit den laut/leise Tasten trifft</li>
<li>data und cache wipe starten</li>
<li>install zip from sdcard auswählen</li>
<li>choose zip from sdcard, um die Firmware auszuwählen</li>
<li>CM-11 wird installiert.</li>
<li>Mit gapps das gleiche wiederholen</li>
<li>reboot und warten, bis der cache aufgebaut wird (kann ein paar Minuten dauern)</li>
</ul>


<p>Das wars. Es geht insgesamt recht schnell, das Laden der einzelnen Programme und Vorbereiten des Flashens dauert wesentlich länger.</p>

<p>Viel Spass.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DD-WRT Router hinter Unitymedia-Kabelnetz]]></title>
    <link href="http://burningTyger.github.com/blog/2014/01/05/dd-wrt-router-hinter-unitymedia-kabelnetz/"/>
    <updated>2014-01-05T11:56:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2014/01/05/dd-wrt-router-hinter-unitymedia-kabelnetz</id>
    <content type="html"><![CDATA[<p>Unitymedia liefert in den meisten Fällen lediglich ein Kabelmodem für
den Internetanschluss. Wenn man einen eigenen Router dahinterschaltet,
dann wird es mit der Verbindung in den meisten Fällen nicht klappen,
weil Unitymedia die MAC nicht akzeptiert. Dafür gibt es eine einfache
Lösung, Mac-Cloning. D.h. man trägt in die MAC Einstellungen des Routers
die MAC Adresse des Modems ein und schon klappt die Verbindung mit dem
WAN von Unitymedia. Dazu geht man in dd-wrt auf Setup / MAC Address
Clone und trägt in die erste Zeile die Modemadresse ein. Dazu noch Mac
Clone enable anklicken. Eventuell muss man Router und Modem neu starten,
damit der Router die WAN-Adresse bekommt.</p>

<p>Das gleiche gilt übrigens auch für eine FritzBox, die man ebenfalls
hinter einem Unitymedia-Kabelmodem betreiben kann.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DD-WRT auf einem TP-Link WDR4900 V1 Router installieren]]></title>
    <link href="http://burningTyger.github.com/blog/2014/01/05/dd-wrt-auf-einem-tp-link-wdr4900-v1-router-installieren/"/>
    <updated>2014-01-05T11:41:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2014/01/05/dd-wrt-auf-einem-tp-link-wdr4900-v1-router-installieren</id>
    <content type="html"><![CDATA[<p>Um DD-WRT auf dem TP-Link WDR4900 V1 zu installieren, braucht man nicht
viel. Leider gibt es kaum Informationen zu finden, wie man es
installiert. Da man aber auch viel kaputt machen kann, gebe ich kurz die
ersten Schritte an.</p>

<p>In den Foren und auf den Infoseiten stehen wichtige Details zur
alternativen Firmware. Die sollten schon gelesen werden. Wenn etwas
schiefgeht, ich bin nicht schuld daran!</p>

<p>Um den Router zu flashen wird beim ersten Mal eine besondere Datei
benötigt, die sich hier befindet:
<a href="ftp://dd-wrt.com/others/eko/BrainSlayer-V24-preSP2/2013/12-24-2013-r23204/tplink_tl-wdr4900v1/">ftp://dd-wrt.com/others/eko/BrainSlayer-V24-preSP2/2013/12-24-2013-r23204/tplink_tl-wdr4900v1/</a>
Lade <code>factory-to-ddwrt.bin</code> herunter und lade es als Firmwareupgrade im
Browser in den Router hoch. Der Router wird es als Firmware erkennen und
das Gerät flashen. Vorher empfiehlt dd-wrt den Router vollständig
zurückzusetzen.</p>

<p>Für spätere Upgrades der dd-wrt Firmware muss die andere Datei verwendet
werden <code>tl-wdr4900-webflash.bin</code>.</p>

<p>Leider ist die dd-wrt Weboberfläche alles andere als stabil und stürzt
häufig ab. Dafür ist es sinnvoll, wenn man sich ssh auf dem Gerät
einrichtet und bei Bedarf kurz einloggt und <code>reboot</code>et.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix a corrupt Mac OS X hard drive (catolog)]]></title>
    <link href="http://burningTyger.github.com/blog/2014/01/05/how-to-fix-a-corrupt-mac-os-x-hard-drive-catolog/"/>
    <updated>2014-01-05T11:19:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2014/01/05/how-to-fix-a-corrupt-mac-os-x-hard-drive-catolog</id>
    <content type="html"><![CDATA[<p>Usually you won&#8217;t notice a corrupt hard drive under Mac OS X unless it
tells you so or because you checked your hard drive in Disk Utils.</p>

<p>If it is broken to some degree Disk Utils will let you fix them or tells
you to reformat your hard drive. In some cases that is not an option.</p>

<p>In my case I had a broken hard drive that wouldn&#8217;t let me resize the
partitions and I wasn&#8217;t able to install Linux on a separate partition.
Everything failed. My DuperDrive only reads CDs. So no OS X install DVD
to run DiskUtils from another drive. Runing the Disk Utils from the
recovery partition didn&#8217;t let me fix or reformat the hard drive either
(because it&#8217;s on the same hard drive after all) and the internet
recovery mode didn&#8217;t even start. Neither the USB recovery disk I
created.</p>

<p>Being smart I burned on another Mac a rare CD-sized Lubuntu Distro which
I also intended to install on my main Mac. It offers gparted, the Linux
partition manager. Running that from another medium brought hope to
fixing the hard drive partition mess. It failed. It said something about
a corrupt catalog on the mac partition and wasn&#8217;t able to fix it. Not
being able to fix the problem in one place also meant no resizing the
partition in the other place. And I was stuck with the same old disk.</p>

<p>Turning out to be even smarter than that I remembered single mode for my
Mac. I rebooted the Mac and started up in single mode. Now this has two
advantages: first it is the system loaded in memory and second it has
all the mac specific tools on board (unlike gparted with Linux tools).
Running fsck on the mac partition worked its way through broken b-trees
and corrupt catalog data and in the end I had a working hard drive with
no more errors and I was able to resize the partition to create free
space on it which Lubuntu magically filled with Linux.</p>

<p>I don&#8217;t exacly remember the fsck comman I used but it was something
simple. Like, fix that partition when you find errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cyanogenmod 11 auf dem Samsung Galaxy S4 mini GT-I9195]]></title>
    <link href="http://burningTyger.github.com/blog/2013/12/19/cyanogenmod-11-auf-dem-samsung-galaxy-s4-mini-gt-i9195/"/>
    <updated>2013-12-19T16:55:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/12/19/cyanogenmod-11-auf-dem-samsung-galaxy-s4-mini-gt-i9195</id>
    <content type="html"><![CDATA[<p>Die Infos wurden zusammengetragen mit Hilfe der folgenden Seiten und stellen keinen Anspruch auf Vollständigkeit. Wenn was schiefgeht und dein Telefon unbrauchbar geworden ist, es ist deine persönliche Verantwortung.</p>

<p>Überblick: http://wiki.cyanogenmod.org/w/Serranoltexx_Info
Installieren: http://wiki.cyanogenmod.org/w/Install_CM_for_serranoltexx
Installieren 2: http://forum.xda-developers.com/showthread.php?t=2558685</p>

<p>Es wird keine SD-Karte gebraucht, der interne Speicher reicht aus, um CM-11 zu flashen.</p>

<p>CM-11 ist noch Alpha. Es läuft aber ok. Also los.</p>

<p>Folgende Downloads werden benötigt:</p>

<ul>
<li>ClockworkMod Recovery (http://cmw.cmfs.me/jf/recovery-clockwork-6.0.4.5-serranoltexx.tar.zip)</li>
<li>Heimdall (http://www.glassechidna.com.au/products/heimdall/)</li>
<li>CyanogenMod 11 (http://get.cm/?device=serranoltexx)</li>
<li>gapps (http://itvends.com/gapps/gapps-kk-20131208.zip)</li>
</ul>


<p>Bitte unter den zwei Installieren Links die aktuelle Version auswählen.</p>

<p>Vor der Installation empfiehlt es sich, den Telefonspeicher zu sichern, d.h. SMS und Anrufe in einer Datenbank abzulegen, damit man sie später wieder einspielen kann. Gleiches gilt für die installierten Apps, die man sicher gerne wieder haben möchte.</p>

<p>Alle sind im Market zu finden:
* AppBak
* SMS Backup and Restore
* Call Logs Backup and Restore</p>

<p>Die anderen App-Daten, die bisher angelegt wurden, werden beim Flashen nicht gelöscht. Dafür aber alle Accounts. Es macht Sinn, sich vorher alle zu notieren, damit man hinterher nicht anfängt zu suchen, wenn man sich für alle Dienste neu einloggen muss.</p>

<p>Heimdall installieren, auf dem Mac muss nach der Installation ein Reboot durchgeführt werden.</p>

<p>ClockworkMod Recovery entpacken und im Terminal in das entsprechende Verzeichnis wechseln (es sollte recovery.img vorhanden sein).</p>

<p>CyanogenMod auf /sdcard kopieren – auf dem s4 mini ist das ein interner Speicher.</p>

<p>Nun folgende Schritte durchführen (so ging es unter Mac OS X 10.9.1):</p>

<ul>
<li>S4 mini ausschalten</li>
<li>Verbindungskabel an den Mac anschließen, aber noch nicht ans Telefon</li>
<li>S4 mini im Download-Modus starten (Ton-leise + An/Aus + Home)</li>
<li>im Terminal <code>heimdall flash --RECOVERY recovery.img --no-reboot</code></li>
<li>Das S4 mini startet den blauen Balken und im Terminal gibt es eine Erfolgsmeldung</li>
<li>Das S4 mini neu starten mit Hilfe von Ton-lauter + An/Aus + Home</li>
<li>S4 mini ist nun im Recovery-Modus und man kann CM-11 installieren</li>
<li>An/Aus geht im Menü zurück, Home bestätigt die Auswahl, die man mit den laut/leise Tasten trifft</li>
<li>data und cache wipe starten</li>
<li>install zip from sdcard auswählen</li>
<li>choose zip from sdcard, um die Firmware auszuwählen</li>
<li>CM-11 wird installiert.</li>
<li>Mit gapps das gleiche wiederholen</li>
<li>reboot und warten, bis der cache aufgebaut wird (kann ein paar Minuten dauern)</li>
</ul>


<p>Nun mit Hilfe der SMS- und Anrufwiederherstellung beides zurück aufs Telefon holen und fertig ist die Sache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moodle Datenbankmigration]]></title>
    <link href="http://burningTyger.github.com/blog/2013/11/01/moodle-datenbankmigration/"/>
    <updated>2013-11-01T18:29:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/11/01/moodle-datenbankmigration</id>
    <content type="html"><![CDATA[<p>Moodle wird häufig ohne weiter darüber nachzudenken auf einem LAMP-Stack installiert, also Linux, Apache, MySQL und PHP. Ist auch soweit ok. Es funktioniert ja. So mancher wird aber nach einiger Zeit denken, dass es vielleicht besser gewesen wäre diese oder jene Datenbank zu nehmen, anstelle von MySQL. Gründe gibt es genug: Performance, Oracle, GPL vs BSD, etc. Aber einfach so die Dantenbank zu wechseln geht nicht. Wer ein bisschen googlet, wird herausfinden, dass man nicht mal gerade eben ein MySQL Dump und ein (z.B.) Postgres Restore machen kann. Das geht halt nicht. Fertig. Mühsam geht es dann vielleicht doch, aber eigentlich lässt man besser die Finger davon. Zum Glück gibt es eine praktikable Lösung, die näher liegt als man denkt. Moodle selber bringt eine experimentelle Migrationsschnittstelle mit, die sich in den Entwicklereinstellungen unter experiementell befindet. Einfach die neue Datenbank installieren, das passenden php-Modul zur Verfügung stellen und schon zeigt das Werkzeug alle zur Verfügung stehenden Datenbanken an, in die exportiert werden kann. Das geht relativ schnell und nach erfolgreicher Migration, muss lediglich die config.php mit den neuen Daten geändert werden.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moodles cron jobs beschleunigen]]></title>
    <link href="http://burningTyger.github.com/blog/2013/10/30/moodles-cron-jobs-beschleunigen/"/>
    <updated>2013-10-30T20:33:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/10/30/moodles-cron-jobs-beschleunigen</id>
    <content type="html"><![CDATA[<p>Moodle ist ein recht träges System, das sich aber punktuell und mit gezielten
Maßnahmen deutlich beschleunigen lässt. Eine davon ist die Ausführung der
cron-Jobs, die man entweder über einen http-Aufruf laufen lassen kann oder,
und hier kommt der Clou, direkt mit php aufrufen kann. Lässt man das dann alle
paar Minuten über cron laufen, dann macht das einen erheblichen Unterschied aus.
Der Test mit einer kleineren Installation ergab, dass ein Apache-Aufruf etwa
20 Sekunden in Anspruch nahm, der direkte Aufruf schon nach etwa 4 Sekunden
erledigt war. Das war also eine Steigerung von über 500%, von der Schonung
weiterer Ressourcen spreche ich noch gar nicht. Wenn man den Unterschied bei
NewRelic beobachtet, sieht man schön, dass die Anfragen an die Datenbank und an
den Server im allgemeinen bedeutend nachlassen.</p>

<p>In meiner Installation unter Ubuntu 12.04 sah der Aufruf mit der cron Tabelle
wie folgt aus:</p>

<pre><code>*/10 * * * * php -q -f /usr/share/nginx/www/moodle/admin/cli/cron.php
</code></pre>

<p>Das wars, wird mittels:</p>

<pre><code>crontab -e
</code></pre>

<p>in die cron-Tabelle eingetragen und fertig.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moodle on Openshift one liner]]></title>
    <link href="http://burningTyger.github.com/blog/2013/02/10/moodle-on-openshift-one-liner/"/>
    <updated>2013-02-10T21:55:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/02/10/moodle-on-openshift-one-liner</id>
    <content type="html"><![CDATA[<pre><code>rhc app create moodle php-5 mysql --from-code=git://github.com/burningTyger/openshift_moodle.git
</code></pre>

<p>Disclaimer: You do need Ruby, the rhc gem and git though :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moodle auf Openshift betreiben]]></title>
    <link href="http://burningTyger.github.com/blog/2013/02/01/moodle-auf-openshift-betreiben/"/>
    <updated>2013-02-01T20:35:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/02/01/moodle-auf-openshift-betreiben</id>
    <content type="html"><![CDATA[<h3>Moodle?</h3>

<p>Moodle ist die klassische Lernplatform fürs Intra-/Internet und wird von
vielen Schulen und Universitäten eingesetzt. Neben unzähligen
Einstellungsmöglichkeiten und Plugins hat es mittlerweile einen Status
erreicht, der es möglich macht, Moodle für nahezu jeden
Anwendungsbereich einzurichten. Dabei spielt es dann keine Rolle, ob 12 Nutzer bedient
werden oder 12 Millionen. Moodle ist für so ziemlich alles gewappnet und
eine aktive Entwicklergemeinde sorgt für einen ständigen Fluss an
Verbesserungen und Erweiterungen.</p>

<p>Das klingt erstmal gut, aber wer Moodle ernsthaft einsetzen möchte,
braucht eine Menge Zeit, einige Ressourcen und Durchhaltevermögen.
Moodle kann ein richtiges Monster sein. Die Basisinstallation ist recht
umfangreich und man braucht einiges an Ressourcen, um Moodle
einigermaßen zum Laufen zu bekommen. Der Speicherplatz, den man vom
Provider nebenan zur Verfügung gestellt bekommt, reicht meistens nicht
aus, um eine sinnvolle Installation einzurichten. Moodle ist durch seine
schiere Größe speicherhungrig und verlangt nach mehr. Darüber hinaus
muss der Server PHP 5.3 mit einigen Erweiterungen und MySQL bereitstellen. Da
die meisten Provider keine genauen Angaben über Speicherkapazität machen
und teilweise auch nicht verraten, welche Erweiterungen installiert
sind, möchte man ungern Verträge eingehen.</p>

<h3>Openshift</h3>

<p>An dieser Stelle kommt <a href="https://openshift.com">Openshift</a> von Red Hat
ins Spiel. Openshift ist ein relativ neuer Anbieter einer <i>Platform as a
Service</i>, zu neudeutsch <i>Cloud</i>. Man installiert eine sogenannte
Applikation, in unserem Fall Moodle, bei Openshift und dort kümmert man
sich um die notwendigen Ressourcen. D.h. braucht man viel Ressourcen,
weil viele Nutzer auf den Dienst zugreifen, dann wird die Anwendung
skaliert, bekommt also mehr Ressourcen zugeteilt. Bei geringerem Bedarf
wird wieder runtergeschraubt. Das kostet natürlich Geld. Je nach
Verbrauch. Dafür muss man sich um nichts kümmern, es läuft einfach.</p>

<p>Als einfacher Nutzer oder als Organisation mit weniger hohen Ansprüchen
lässt sich Openshift aber auch schon verwenden. Man bekommt als
kostenlosen Einstieg in den PaaS drei Instanzen zu jeweils 500MB
zugeteilt, die man auch verbinden kann. D.h. es stehen einem kostenlos
bis zu 1.5GB an Speicher zur Verfügung. Das lasse man sich jetzt mal auf
der Zunge zergehen. Das bietet kein Provider um die Ecke und auch nicht
für umsonst.</p>

<p>500MB sind eine gute Größe für eine einfache Moodle Installation. Es
reicht um etwa 5–10 Personen gleichzeitig zu versorgen. 5-10 Personen,
die gleichzeitig versuchen eine Seite zu laden. Mit anderen Worten, wenn
eine ganze Klasse von 30 Schülern an 30 PCs sitzt und gleichzeitig
versucht sich einzuloggen. Der eine braucht etwas länger, der andere ist
etwas schneller. Im schlimmsten Fall muss der 11. etwas länger auf die
Seite warten, wird aber dann auch bedient und kann sich einloggen. Wie
viele Klassen arbeiten gleichzeitig an Moodle? In seltenen Fällen mehr
als eine und wenn, dann staut es sich höchstens beim Login.</p>

<h3>Git</h3>

<p>Openshift ist kein klassischer Anbieter von Speicherplatz im Internet.
Es ist ausgelegt für moderne Webanwendungen, die mit der
Versionsverwaltung <a href="http://git-scm.com">Git</a> entwickelt wurden. Git ist keine
Programmiersprache sondern ein Weg, unterschiedliche Versionen einer
Software zu verwalten. Eine Art Buchhaltung für Software. Jeder Zustand
wird festgehalten und kann rückgängig gemacht werden. Man kann
Änderungen in sogenannte Branches verlagern und später mit einbinden. Es
macht die Entwicklung von modernen Anwendungen erheblich einfacher und
fördert die Zusammenarbeit mit anderen Entwicklern.</p>

<p>Openshift macht sich die unterschiedlichen Fähigkeiten von Git zu eigen
und ermöglicht den Abgleich von Daten nur darüber. Kein FTP, keine
umständlichen Überschreibeaktionen, um alte Daten mit neuen
auszutauschen und der bangen Hoffnung, dass man nicht doch das falsche
gelöscht hat. Git überträgt lediglich die Änderungen und startet den
Server auf Openshift neu. Damit werden alle Aktualisierungen aktiv und
die Anwendung ist auf dem neusten Stand.</p>

<p>Moodle verwendet zur Entwicklung bereits Git und betreibt ein sog.
öffentliches Repository auf <a href="https://github.com">GitHub</a> unter der
Adresse
<a href="https://github.com/moodle/moodle">https://github.com/moodle/moodle</a>.
Dort kann man alle Änderungen, sogenannte Commits nachvollziehen und
beobachten. Leider kann man dieses Repository nicht direkt bei Openshift
verwenden, dafür ist Moodle dann wieder etwas anspruchsvoll. Man muss
Moodle vorerst in ein anderes Repository einbinden, damit es die
richtigen Einstellungen für die Datenbank etc. findet und verwenden
kann. Damit nicht jeder von vorne anfangen muss und das Rad mehrmals
erfunden wird, habe ich unter
<a href="https://github.com/burningTyger/openshift_moodle">openshift_moodle</a> ein
Repository eingerichtet, das sich direkt für Openshift verwenden lässt.
Dort gibt es auch eine Anleitung auf Englisch, die bei der Einrichtung
hilft. Sollte es Schwierigkeiten mit der englischen Anleitung geben,
stehe ich für Fragen gerne zur Verfügung. Entweder per Twitter
<a href="https://twitter.com/btyga">@btyga</a>
oder per eMail über b6tyger bei gmail.com.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom config files in Openshift submodules]]></title>
    <link href="http://burningTyger.github.com/blog/2013/01/16/custom-config-files-in-openshift-submodules/"/>
    <updated>2013-01-16T20:08:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/01/16/custom-config-files-in-openshift-submodules</id>
    <content type="html"><![CDATA[<p>Using a <a href="http://git-scm.com/book/en/Git-Tools-Submodules">git submodule</a> in one
of your <a href="https://openshift.redhat.com">Openshift</a> apps can be quite useful. I
created a <a href="http://j.mp/V2fOkq">Moodle Quickstart</a> and needed to embed
<a href="http://moodle.org">Moodle</a> inside my Openshift repo. There are many ways of
doing so but most are a pain to maintain if you need frequent updates to keep
up with security issues.</p>

<p>So forget about <a href="http://git-scm.com/book/ch6-7.html">subtrees</a>, manual
overwriting with archives etc. use a submodule instead. I&#8217;ll post an example
with Moodle here, the same can be said about most other apps. Assuming you set
up a new app through the web interface:</p>

<pre><code> rhc app git-clone moodle 
 # clone the app locally cd moodle 
 git rm -rf php git
 ci -m 'remove php dir for submodule' 
 # clean your repo git submodule add
 git://git.moodle.org/moodle.git php 
 # make php your submodule dir 
 cd php git
 checkout 10ad21dc9a50c4720bf69fa0224eeb28a892e997 
 # check out a certain commit inside your submodule 
 cd .. 
 git add -u 
 git ci -am 'add moodle submodule and set to 2.3.3' 
 # go back to your repo root and commit the submodule to it
</code></pre>

<p>Now you can push your app to Openshift and you can easily update your app by
updating the submodule to a newer commit.</p>

<p>There is one caveat though: you cannot add your own files to the submodule
without having a remote repository where you can store your changes and make
them available to others (in this case Openshift because it will need the
commit with your chages accessible). As you see the submodule is alien to the
parent repository. Everything the parent knows about the submodule is inside
the <code>.gitmodules</code> file. It keeps track of the submodule and its attributes:</p>

<pre><code>[submodule "php"] 
path = php 
url = git://git.moodle.org/moodle.git
</code></pre>

<p>If you also check out the github page you will notice that the submodule repo
is set to a certain commit:</p>

<p><img src="http://d.pr/i/2vLI+" alt="github: moodle path is set to commit" /></p>

<p>If you clone my repository from GitHub you will also notice that the <code>php</code> dir
is empty. That&#8217;s because there is nothing. All it does is refer to that moodle
repo commit. You can trigger the clone of that repo but there&#8217;s no need to.
Openshift can do that for you once you push it there.</p>

<p>You get the idea. You don&#8217;t have control over that submodule. Take it or leave
it. So unless you want to fork moodle with your own changes to the repo and
pull in changes to that fork you cannot make changes to it.</p>

<p>That&#8217;s where we are. However, there is a simple workaround for this on
Openshift that is really slick and easy to set up. You can use one of the
<code>action_hooks</code> that come with each app and that reside in the
<code>.openshift/action_hooks</code> dir in the root of your repo.</p>

<p>In the case of Moodle I needed to place my <code>config.php</code> in the <code>php</code> dir where
Moodle expects all the database settings and other stuff to properly run.</p>

<p>Since I already used <code>.openshift/action_hooks/pre_start_php-5.3</code> to set the
OPENSHIFT_SECURE_TOKEN (which I described
<a href="http://burningtyger.github.com/blog/2013/01/06/hassle-free-secure-tokens-%0Aon-openshift/">here</a>) I just added a line which copies the <code>config.php</code> from
<code>config/config.php</code> to <code>php/config.php</code>. That means I added a dir with a file
in it to the <a href="https://github.com/burningTyger/openshift_moodle/tree/master/config">parent directory</a>
and copied it upon deployment to the submodule folder:</p>

<pre><code>cp ~/app-root/repo/config/config.php ~/app-root/repo/php/
</code></pre>

<p>Since the <code>action_hook</code> are called within every deployment there is no need to
manually move files or change the submodule via SSH. The config file can be
added to the Openshift repository and tracked there. A very clean solution if
you ask me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hassle free secure tokens on Openshift]]></title>
    <link href="http://burningTyger.github.com/blog/2013/01/10/hassle-free-secure-tokens-on-openshift/"/>
    <updated>2013-01-10T15:01:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/01/10/hassle-free-secure-tokens-on-openshift</id>
    <content type="html"><![CDATA[<p><a href="https://openshift.redhat.com">Openshift</a> makes extensive use of env
vars that can be used by your apps. This is really useful for creating
generic repositories like <a href="https://github.com/openshift">Quickstarts</a>.</p>

<p>You create an app, everybody who likes it pulls it into their Openshift
repository and deploys it. Usually everything is ok but
<a href="https://openshift.redhat.com/community/developers/get-involved/creating-quickstarts">sometimes</a>
you need to create a secure token to have an extra layer of security.</p>

<p>For my Openshift <a href="http://j.mp/V2fOkq">Moodle Quickstart</a> I needed a
secure token to <a href="https://github.com/burningTyger/openshift_moodle/blob/master/config/config.php#L73">salt passwords</a>.
I didn&#8217;t want to create a config file that needs to be manually changed
by the user so I thought of something else:</p>

<pre><code>export OPENSHIFT_SECURE_TOKEN="$(ruby -e "
  require 'securerandom'
  if File.exist? 'token'
    token = File.open('token').read
  else
    token = SecureRandom.base64(64)
    File.open('token', 'w') { |file| file.write(token) }
  end
  puts token
")"
</code></pre>

<p>This little script goes into one of the <code>action_hooks</code> that are sourced
by the app.</p>

<p>In case of my Moodle repo I put it into
<code>.openshift/action_hooks/pre_start_php-5.3</code>. For other apps you will
have to use the appropriate cartridge name instead (i.e ruby-1.9 etc.).</p>

<p>What this script does it runs an inline Ruby script that checks if a
token file exists in your data dir and reads it. If not, it creates one
and writes a random string into it.</p>

<p>After that it writes the string to STDOUT when it is set to
<code>OPENSHIFT_SECURE_TOKEN</code>. This is the env var that you can then use in
your app&#8217;s config files without manually entering a string yourself.</p>

<p>If you need to migrate your app from somewhere else to Openshift you can
still use this script and just set via SSH the string in <code>token</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a custom translation for Instructure's Canvas]]></title>
    <link href="http://burningTyger.github.com/blog/2013/01/04/installing-a-custom-translation-for-instructures-canvas/"/>
    <updated>2013-01-04T00:14:00+01:00</updated>
    <id>http://burningTyger.github.com/blog/2013/01/04/installing-a-custom-translation-for-instructures-canvas</id>
    <content type="html"><![CDATA[<p>You can find their repos here over at @instructure. Canvas is an
interesting Ruby on Rails Learning management system that looks a lot
cleaner than Moodle. It&#8217;s still 1.8 only and running on rails 2.3 but
still promising. Provided with the default language English there is
Spanish and Russian available.</p>

<p>If you want to add your own translation first check if there is already
a complete translation available over at
<a href="https://www.transifex.com/projects/p/canvas-lms/">Transifex</a> the
translation community. Right now there are some other languages
available, German for example is complete. You can download a
translation and use it in your project.</p>

<p>German example:</p>

<p>rename the file to de.yml and place it in your locale folder</p>

<pre><code>cp de.yml canvas/config/locales/
</code></pre>

<p>edit the locales.yml file so that it looks like this:</p>

<pre><code>en:
  locales:
    en: English
es:
  locales:
    es: Español
ru:
  locales:
    ru: ру́сский
de:
  locales:
    de: Deutsch
</code></pre>

<p>after that you need to restart your app and set the language to German
in your site settings.</p>
]]></content>
  </entry>
  
</feed>
